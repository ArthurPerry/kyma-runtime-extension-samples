apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
  name: triggersupplyshortagemessage
spec:
  buildResources:
    limits:
      cpu: 1700m
      memory: 1100Mi
    requests:
      cpu: 1100m
      memory: 1100Mi
  deps: |-
    { 
      "name": "triggersupplyshortagemessage",
      "version": "1.0.0",
      "dependencies": {
        "node-fetch": "^2.6.7"
        }
    }
  env:
    - name: TRIGGER_QUEUE_PATH
      valueFrom:
        configMapKeyRef:
          key: TRIGGER_QUEUE_PATH
          name: triggerfunctionconfigmap
    - name: MESSAGE_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          key: MESSAGE_CLIENT_SECRET
          name: eventmeshsecret
    - name: MESSAGE_CLIENT_ID
      valueFrom:
        secretKeyRef:
          key: MESSAGE_CLIENT_ID
          name: eventmeshsecret
    - name: MESSAGING_TOKEN_ENDPOINT
      valueFrom:
        configMapKeyRef:
          key: MESSAGING_TOKEN_ENDPOINT
          name: triggerfunctionconfigmap
    - name: MESSAGING_ENDPOINT_BASE
      valueFrom:
        configMapKeyRef:
          key: MESSAGING_ENDPOINT_BASE
          name: triggerfunctionconfigmap
  maxReplicas: 5
  minReplicas: 1
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  runtime: nodejs14
  source: |-
    const fetch = require('node-fetch')

    module.exports = {
      main: async function (event, context) {

        const clientId = process.env.EM_.MESSAGE_CLIENT_ID
        const clientSecret = process.env.EM_.MESSAGE_CLIENT_SECRET

        const authString = "Basic " + Buffer.from(`${clientId}:${clientSecret}`).toString('base64')

        const messagingTokenEndpoint = process.env.EM_.MESSAGING_TOKEN_ENDPOINT
        const messagingTokenFetchUrl = `${messagingTokenEndpoint}?grant_type=client_credentials&response_type=token`

        // Fetch the OAuth2 token to call the message queue
        const fetchTokenHeader = {
          "Authorization": authString
        }
        const responseFromTokenEndpoint = await fetch(messagingTokenFetchUrl,
          {
            method: 'POST',
            headers: fetchTokenHeader
          })

        const responseBodyFromTokenEndpoint = await responseFromTokenEndpoint.json()

        let accessTokenEventMesh = ""

        if (responseFromTokenEndpoint.status === 200) {

          accessTokenEventMesh = responseBodyFromTokenEndpoint.access_token
          console.log("Access Token fetched")

        }
        else {
          console.log(`Error when fetching the token - status: ${responseFromTokenEndpoint.status}`)
          return
        }

        // Call queue to publish message that order was updated
        const messagingEndpointBase = process.env.EM_.MESSAGING_ENDPOINT_BASE
        const queuePath = process.env.EM_.TRIGGER_QUEUE_PATH
        const queuePathEncoded = encodeURIComponent(queuePath)

        const queueUrl = `${messagingEndpointBase}/messagingrest/v1/queues/${queuePathEncoded}/messages`

        const queueHeader = {
          "Authorization": `Bearer ${accessTokenEventMesh}`,
          "Content-Type": "application/json",
          "x-qos": 0

        }

        const queueBody = {
          "materialId": 123
        }

        const responseFromQueue = await fetch(queueUrl,
          {
            method: 'POST',
            headers: queueHeader,
            body: JSON.stringify(queueBody)
          })

        let message = ""

        if (responseFromQueue.status === 204) {

          message = `Message with materialId ${queueBody.materialId} sent to queue ${queuePath}`
          console.log(message)
          return message
        }
        else {
          message = `Error when sending message - status: ${responseFromQueue.status}`
          console.log(message)
          return message
        }

      }
    }
